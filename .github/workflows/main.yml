# Nome do workflow
name: Build and Deploy React Native App

# Gatilhos que iniciarão o workflow
on:
  push:
    branches:
      # O workflow será acionado quando houver um push na branch 'main'
      - main
  pull_request:
    branches:
      # O workflow também será acionado em pull requests para a branch 'main'
      - main

# Definição dos jobs
jobs:
  build:
    # Define o ambiente onde o job será executado
    runs-on: ubuntu-latest

    env:
      KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
      KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

    steps:
    
    # Primeiro passo: Checkout do código
    - name: Checkout code
      uses: actions/checkout@v4.1.5 # Utiliza a ação de checkout para obter o código da branch especificada. A ação 'checkout' faz o download do repositório no diretório de trabalho

    # Segundo passo: Configurar o Java JDK
    - name: Setup Java JDK
      uses: actions/setup-java@v4.2.1
      with:
        distribution: 'adopt' # Especifica a distribuição do JDK, neste caso AdoptOpenJDK
        java-version: '17' # Especifica a versão do JDK a ser utilizada, neste caso a versão 11. Esta ação instala o JDK especificado no ambiente de execução
    
    # Terceiro passo: Instalar Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3 # Utiliza a ação de configuração do Node.js
      with:
        node-version: 20.x # Especifica a versão do Node.js a ser utilizada, neste caso a versão 20. Esta ação instala a versão especificada do Node.js no ambiente de execução

    # Quinto passo: Instalar dependências do projeto
    - name: Install dependencies
      run: npm install # Comando para instalar as dependências do projeto usando NPM. Este passo instala todas as dependências listadas no arquivo package.json

    # Sexto passo: Configurar o SDK do Android
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2 # Utiliza a ação de configuração do SDK do Android

    # Sétimo passo: Decode keystore
    - name: Decode keystore
      env:
        ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/android-production.jks


    # Oitavo passo: Build do aplicativo Android
    - name: Build Android APK
      run: | # Navega para o diretório android e executa o comando Gradle para construir a versão de release do aplicativo. Este passo compila o código-fonte do aplicativo e gera um APK de release
        cd android
        ./gradlew assembleRelease

    - name: Build Android AAB
      run: | # Navega para o diretório android e executa o comando Gradle para construir o Android App Bundle (AAB). Este passo compila o código-fonte do aplicativo e gera um AAB de release
        cd android
        ./gradlew bundleRelease

    # # Nono passo: Upload do APK para o Firebase App Distribution
    # - name: Upload APK to Firebase App Distribution
    #   uses: wzieba/Firebase-Distribution-Github-Action@v1 # Utiliza a ação para fazer upload do APK para o Firebase
    #   with:
    #     appId: ${{ secrets.FIREBASE_APP_ID }} # ID do aplicativo no Firebase (armazenado em secrets)
    #     token: ${{ secrets.FIREBASE_TOKEN }} # Token de autenticação do Firebase (armazenado em secrets)
    #     groups: testers # Grupo de testadores que receberão o APK
    #     file: android/app/build/outputs/apk/release/app-release.apk # Caminho para o APK gerado. Este passo faz o upload do APK gerado para o Firebase App Distribution